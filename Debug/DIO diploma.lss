
DIO diploma.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001f6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00800060  000001f6  0000028a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000006  00800062  00800062  0000028c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000028c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000002bc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000c8  00000000  00000000  000002f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001057  00000000  00000000  000003c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000087f  00000000  00000000  00001417  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000c3a  00000000  00000000  00001c96  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000170  00000000  00000000  000028d0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000050c  00000000  00000000  00002a40  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000009ac  00000000  00000000  00002f4c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a8  00000000  00000000  000038f8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e6 ef       	ldi	r30, 0xF6	; 246
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a2 36       	cpi	r26, 0x62	; 98
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a2 e6       	ldi	r26, 0x62	; 98
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a8 36       	cpi	r26, 0x68	; 104
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 49 00 	call	0x92	; 0x92 <main>
  8a:	0c 94 f9 00 	jmp	0x1f2	; 0x1f2 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <main>:
 #define  TaskSET_BIT(PORT,BIT,VALUE)  (  PORT=( PORT &(~(1<<BIT)) ) | (VALUE<<BIT)  )

int main(void)
{
 
DDRC=0xff;
  92:	8f ef       	ldi	r24, 0xFF	; 255
  94:	84 bb       	out	0x14, r24	; 20
     while (1) 
    {
 STOPWatch();
  96:	0e 94 67 00 	call	0xce	; 0xce <STOPWatch>
  9a:	fd cf       	rjmp	.-6      	; 0x96 <main+0x4>

0000009c <segment_BinaryTodecimal>:
			flag2=1;
		}
	}
	else
	{
		flag2=0;
  9c:	9d ec       	ldi	r25, 0xCD	; 205
  9e:	89 9f       	mul	r24, r25
  a0:	91 2d       	mov	r25, r1
  a2:	11 24       	eor	r1, r1
  a4:	29 2f       	mov	r18, r25
  a6:	26 95       	lsr	r18
  a8:	26 95       	lsr	r18
  aa:	26 95       	lsr	r18
  ac:	22 0f       	add	r18, r18
  ae:	32 2f       	mov	r19, r18
  b0:	33 0f       	add	r19, r19
  b2:	33 0f       	add	r19, r19
  b4:	23 0f       	add	r18, r19
  b6:	82 1b       	sub	r24, r18
  b8:	28 2f       	mov	r18, r24
  ba:	96 95       	lsr	r25
  bc:	96 95       	lsr	r25
  be:	96 95       	lsr	r25
  c0:	30 e1       	ldi	r19, 0x10	; 16
  c2:	93 9f       	mul	r25, r19
  c4:	c0 01       	movw	r24, r0
  c6:	11 24       	eor	r1, r1
  c8:	82 2b       	or	r24, r18
  ca:	85 bb       	out	0x15, r24	; 21
  cc:	08 95       	ret

000000ce <STOPWatch>:
// Task 4 ----- Function to Make StopWatch and assign 2 Buttons to (Reset) and (Pause)
//              and assign the third button to Toggle  another MODE ---> to (increment by 1) and ( increment by 10 ) 

void STOPWatch(void)
{   
	while( IS_Toggle!=1) //---------------------- First MODE --------------------------------
  ce:	3c c0       	rjmp	.+120    	; 0x148 <STOPWatch+0x7a>
	{
		if(BUTTON3_PU) // if Toggle Button then leave this (While LOOP)
  d0:	85 99       	sbic	0x10, 5	; 16
  d2:	07 c0       	rjmp	.+14     	; 0xe2 <STOPWatch+0x14>
		{
			IS_Toggle=1;       // To leave while loop and enter the next loop which contains MODE 2
  d4:	81 e0       	ldi	r24, 0x01	; 1
  d6:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__data_end>
			Timer_IsPaused=1; // discard if Condition 
  da:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <Timer_IsPaused>
			flag1=0;         // reset the flag
  de:	10 92 67 00 	sts	0x0067, r1	; 0x800067 <flag1>
		}
		if(BUTTON1_PU)  // Button 1 for Pause
  e2:	83 99       	sbic	0x10, 3	; 16
  e4:	0f c0       	rjmp	.+30     	; 0x104 <STOPWatch+0x36>
		{
			if(flag1==0) // Flag method ---->> if you hold the button the CPU will not get stuck and wont enter (else) until release the button 
  e6:	80 91 67 00 	lds	r24, 0x0067	; 0x800067 <flag1>
  ea:	81 11       	cpse	r24, r1
  ec:	0d c0       	rjmp	.+26     	; 0x108 <STOPWatch+0x3a>
			{
			Timer_IsPaused=!(Timer_IsPaused); // ----- Toggle Pause/Play -----
  ee:	81 e0       	ldi	r24, 0x01	; 1
  f0:	90 91 64 00 	lds	r25, 0x0064	; 0x800064 <Timer_IsPaused>
  f4:	91 11       	cpse	r25, r1
  f6:	80 e0       	ldi	r24, 0x00	; 0
  f8:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <Timer_IsPaused>
			flag1=1;	
  fc:	81 e0       	ldi	r24, 0x01	; 1
  fe:	80 93 67 00 	sts	0x0067, r24	; 0x800067 <flag1>
 102:	02 c0       	rjmp	.+4      	; 0x108 <STOPWatch+0x3a>
			}
		}
		else
		{
			flag1=0;
 104:	10 92 67 00 	sts	0x0067, r1	; 0x800067 <flag1>
		}
		if(BUTTON2_PD)
 108:	84 9b       	sbis	0x10, 4	; 16
 10a:	03 c0       	rjmp	.+6      	; 0x112 <STOPWatch+0x44>
		{
		Watch_Timer=STOPWATCH_TIME;    // ----- Reset Timer ----- 
 10c:	85 e0       	ldi	r24, 0x05	; 5
 10e:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
		}

		if(Watch_Timer>0) // keep decrementing if timer is bigger than 0 ... if timer=0 then just display 0 in (else)
 112:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 116:	88 23       	and	r24, r24
 118:	a9 f0       	breq	.+42     	; 0x144 <STOPWatch+0x76>
		{
			if(!Timer_IsPaused)
 11a:	90 91 64 00 	lds	r25, 0x0064	; 0x800064 <Timer_IsPaused>
 11e:	91 11       	cpse	r25, r1
 120:	13 c0       	rjmp	.+38     	; 0x148 <STOPWatch+0x7a>
			{
				segment_BinaryTodecimal(Watch_Timer);
 122:	0e 94 4e 00 	call	0x9c	; 0x9c <segment_BinaryTodecimal>
				Watch_Timer--;
 126:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 12a:	81 50       	subi	r24, 0x01	; 1
 12c:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 130:	2f ef       	ldi	r18, 0xFF	; 255
 132:	81 ee       	ldi	r24, 0xE1	; 225
 134:	94 e0       	ldi	r25, 0x04	; 4
 136:	21 50       	subi	r18, 0x01	; 1
 138:	80 40       	sbci	r24, 0x00	; 0
 13a:	90 40       	sbci	r25, 0x00	; 0
 13c:	e1 f7       	brne	.-8      	; 0x136 <STOPWatch+0x68>
 13e:	00 c0       	rjmp	.+0      	; 0x140 <STOPWatch+0x72>
 140:	00 00       	nop
 142:	02 c0       	rjmp	.+4      	; 0x148 <STOPWatch+0x7a>
				_delay_ms(200);
			}
		}
		else
		{
		segment_BinaryTodecimal(Watch_Timer);	
 144:	0e 94 4e 00 	call	0x9c	; 0x9c <segment_BinaryTodecimal>
// Task 4 ----- Function to Make StopWatch and assign 2 Buttons to (Reset) and (Pause)
//              and assign the third button to Toggle  another MODE ---> to (increment by 1) and ( increment by 10 ) 

void STOPWatch(void)
{   
	while( IS_Toggle!=1) //---------------------- First MODE --------------------------------
 148:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__data_end>
 14c:	81 30       	cpi	r24, 0x01	; 1
 14e:	09 f0       	breq	.+2      	; 0x152 <STOPWatch+0x84>
 150:	bf cf       	rjmp	.-130    	; 0xd0 <STOPWatch+0x2>
 152:	4a c0       	rjmp	.+148    	; 0x1e8 <STOPWatch+0x11a>
		}
	}	

	while(IS_Toggle!=0) //---------------------- SECOND MODE --------------------------------
	{		
		if(BUTTON1_PU) // if you press this button ---> increment by (1)
 154:	83 99       	sbic	0x10, 3	; 16
 156:	0f c0       	rjmp	.+30     	; 0x176 <STOPWatch+0xa8>
			{
				if(flag1==0)
 158:	80 91 67 00 	lds	r24, 0x0067	; 0x800067 <flag1>
 15c:	81 11       	cpse	r24, r1
 15e:	0d c0       	rjmp	.+26     	; 0x17a <STOPWatch+0xac>
				{
					Is_Increment=!(Is_Increment);
 160:	81 e0       	ldi	r24, 0x01	; 1
 162:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <Is_Increment>
 166:	91 11       	cpse	r25, r1
 168:	80 e0       	ldi	r24, 0x00	; 0
 16a:	80 93 63 00 	sts	0x0063, r24	; 0x800063 <Is_Increment>
					flag1=1;
 16e:	81 e0       	ldi	r24, 0x01	; 1
 170:	80 93 67 00 	sts	0x0067, r24	; 0x800067 <flag1>
 174:	02 c0       	rjmp	.+4      	; 0x17a <STOPWatch+0xac>
				}
			}
		else
			{
				flag1=0;
 176:	10 92 67 00 	sts	0x0067, r1	; 0x800067 <flag1>
			}
		if(BUTTON2_PD) // if you press this button ---> increment by (10)
 17a:	84 9b       	sbis	0x10, 4	; 16
 17c:	0b c0       	rjmp	.+22     	; 0x194 <STOPWatch+0xc6>
			{
				if(flag2==0)
 17e:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <flag2>
 182:	81 11       	cpse	r24, r1
 184:	09 c0       	rjmp	.+18     	; 0x198 <STOPWatch+0xca>
				{
					Is_Increment=2;
 186:	82 e0       	ldi	r24, 0x02	; 2
 188:	80 93 63 00 	sts	0x0063, r24	; 0x800063 <Is_Increment>
					flag2=1;
 18c:	81 e0       	ldi	r24, 0x01	; 1
 18e:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <flag2>
 192:	02 c0       	rjmp	.+4      	; 0x198 <STOPWatch+0xca>
				}
			}
		 else
			{
				flag2=0;
 194:	10 92 66 00 	sts	0x0066, r1	; 0x800066 <flag2>
			}
			
		if(Is_Increment==1) // incrementing by (1)
 198:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <Is_Increment>
 19c:	81 30       	cpi	r24, 0x01	; 1
 19e:	51 f4       	brne	.+20     	; 0x1b4 <STOPWatch+0xe6>
			{
				Watch_Timer++;
 1a0:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 1a4:	8f 5f       	subi	r24, 0xFF	; 255
 1a6:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
				segment_BinaryTodecimal(Watch_Timer);
 1aa:	0e 94 4e 00 	call	0x9c	; 0x9c <segment_BinaryTodecimal>
				Is_Increment=0;	
 1ae:	10 92 63 00 	sts	0x0063, r1	; 0x800063 <Is_Increment>
 1b2:	0b c0       	rjmp	.+22     	; 0x1ca <STOPWatch+0xfc>
			}
		else if(Is_Increment==2)  // incrementing by (10)
 1b4:	82 30       	cpi	r24, 0x02	; 2
 1b6:	49 f4       	brne	.+18     	; 0x1ca <STOPWatch+0xfc>
			{
				Watch_Timer=Watch_Timer+10;
 1b8:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 1bc:	86 5f       	subi	r24, 0xF6	; 246
 1be:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
				segment_BinaryTodecimal(Watch_Timer);
 1c2:	0e 94 4e 00 	call	0x9c	; 0x9c <segment_BinaryTodecimal>
				Is_Increment=0;
 1c6:	10 92 63 00 	sts	0x0063, r1	; 0x800063 <Is_Increment>
			}
			 
			if(BUTTON3_PU) // if Toggle Button then leave this (While LOOP)
 1ca:	85 99       	sbic	0x10, 5	; 16
 1cc:	0b c0       	rjmp	.+22     	; 0x1e4 <STOPWatch+0x116>
			{
				if(flag3==0)
 1ce:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <flag3>
 1d2:	81 11       	cpse	r24, r1
 1d4:	09 c0       	rjmp	.+18     	; 0x1e8 <STOPWatch+0x11a>
				{
				Timer_IsPaused=0;
 1d6:	10 92 64 00 	sts	0x0064, r1	; 0x800064 <Timer_IsPaused>
				IS_Toggle=0;       // To leave while loop and enter the next loop which contains MODE 2
 1da:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <__data_end>
				flag3=0;
 1de:	10 92 65 00 	sts	0x0065, r1	; 0x800065 <flag3>
 1e2:	02 c0       	rjmp	.+4      	; 0x1e8 <STOPWatch+0x11a>
				}
			}
			else
			{
				flag3=0;
 1e4:	10 92 65 00 	sts	0x0065, r1	; 0x800065 <flag3>
		{
		segment_BinaryTodecimal(Watch_Timer);	
		}
	}	

	while(IS_Toggle!=0) //---------------------- SECOND MODE --------------------------------
 1e8:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__data_end>
 1ec:	81 11       	cpse	r24, r1
 1ee:	b2 cf       	rjmp	.-156    	; 0x154 <STOPWatch+0x86>
	
	
	
	
			
 1f0:	08 95       	ret

000001f2 <_exit>:
 1f2:	f8 94       	cli

000001f4 <__stop_program>:
 1f4:	ff cf       	rjmp	.-2      	; 0x1f4 <__stop_program>
